#!/usr/bin/env python3
import sys
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from sqlalchemy.orm import Session
from app.database import engine, Base, SessionLocal
from app.models import Category, Product, Client, Order, OrderItem, CategoryClosure

def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î...")
    Base.metadata.create_all(bind=engine)
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        existing_categories = db.query(Category).count()
        if existing_categories > 0:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
            return
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        home_appliances = Category(name="–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞")
        washing_machines = Category(name="–°—Ç–∏—Ä–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã", parent=home_appliances)
        refrigerators = Category(name="–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏", parent=home_appliances)
        single_chamber = Category(name="–æ–¥–Ω–æ–∫–∞–º–µ—Ä–Ω—ã–µ", parent=refrigerators)
        double_chamber = Category(name="–¥–≤—É—Ö–∫–∞–º–µ—Ä–Ω—ã–µ", parent=refrigerators)
        tvs = Category(name="–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã", parent=home_appliances)
        
        computers = Category(name="–ö–æ–º–ø—å—é—Ç–µ—Ä—ã")
        laptops = Category(name="–ù–æ—É—Ç–±—É–∫–∏", parent=computers)
        laptop_17 = Category(name="17\"", parent=laptops)
        laptop_19 = Category(name="19\"", parent=laptops)
        monoblocks = Category(name="–ú–æ–Ω–æ–±–ª–æ–∫–∏", parent=computers)
        
        db.add_all([
            home_appliances, washing_machines, refrigerators, 
            single_chamber, double_chamber, tvs,
            computers, laptops, laptop_17, laptop_19, monoblocks
        ])
        db.commit()
        
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º closure table –∑–∞–ø–∏—Å–∏
        def build_closure(category, depth=0):
            closure = CategoryClosure(
                ancestor_id=category.id,
                descendant_id=category.id,
                depth=depth
            )
            db.add(closure)
            
            if category.parent:
                parent_closure = db.query(CategoryClosure).filter(
                    CategoryClosure.descendant_id == category.parent_id
                ).all()
                
                for pc in parent_closure:
                    new_closure = CategoryClosure(
                        ancestor_id=pc.ancestor_id,
                        descendant_id=category.id,
                        depth=pc.depth + 1
                    )
                    db.add(new_closure)
        
        # –°—Ç—Ä–æ–∏–º closure table –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = db.query(Category).all()
        for category in categories:
            build_closure(category)
        
        db.commit()
        print("‚úÖ Closure table –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
        products = [
            Product(name="–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ Samsung", quantity=10, price=25000.00, category=washing_machines),
            Product(name="–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –æ–¥–Ω–æ–∫–∞–º–µ—Ä–Ω—ã–π Bosh", quantity=5, price=18000.00, category=single_chamber),
            Product(name="–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –¥–≤—É—Ö–∫–∞–º–µ—Ä–Ω—ã–π LG", quantity=8, price=32000.00, category=double_chamber),
            Product(name="–ù–æ—É—Ç–±—É–∫ 17\" Dell", quantity=15, price=45000.00, category=laptop_17),
            Product(name="–ù–æ—É—Ç–±—É–∫ 19\" HP", quantity=12, price=52000.00, category=laptop_19),
            Product(name="–ú–æ–Ω–æ–±–ª–æ–∫ Apple iMac", quantity=7, price=89000.00, category=monoblocks),
        ]
        
        db.add_all(products)
        db.commit()
        print("‚úÖ –¢–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients = [
            Client(name="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω", address="–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 1"),
            Client(name="–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä", address="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä., 10"),
        ]
        
        db.add_all(clients)
        db.commit()
        print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑—ã
        client1 = db.query(Client).filter(Client.name == "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω").first()
        client2 = db.query(Client).filter(Client.name == "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä").first()
        
        orders = [
            Order(client_id=client1.id),
            Order(client_id=client2.id),
        ]
        
        db.add_all(orders)
        db.commit()
        print("‚úÖ –ó–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        db.close()

if __name__ == "__main__":
    # –î–∞–µ–º –≤—Ä–µ–º—è –ë–î –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(2)
    init_test_data()